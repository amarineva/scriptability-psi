; ScriptAbility PSI NSIS Installer Script
; Requires NSIS 3.0+ with nsExec and Services plugins

!define PRODUCT_NAME "ScriptAbility PSI"
!define PRODUCT_VERSION "1.1"
!define PRODUCT_PUBLISHER "En-Vision America"
!define PRODUCT_DIR_REGKEY "Software\Microsoft\Windows\CurrentVersion\App Paths\ScriptAbilityPSI"
!define PRODUCT_UNINST_KEY "Software\Microsoft\Windows\CurrentVersion\Uninstall\${PRODUCT_NAME}"
!define PRODUCT_UNINST_ROOT_KEY "HKLM"
!define SERVICE_NAME "ScriptAbilityPSI"
!define DEFAULT_PORT "18450"
!define DEFAULT_LABEL_PATH "C:\Users\Public\Programs\ScriptAbility\Labels"

; MUI 2.0 compatible
!include "MUI2.nsh"
!include "nsDialogs.nsh"
!include "LogicLib.nsh"
!include "WinVer.nsh"
!include "FileFunc.nsh"
!include "WordFunc.nsh"

; MUI Settings
!define MUI_ABORTWARNING
!define MUI_ICON "Icons\icon.ico"
!define MUI_UNICON "Icons\icon.ico"

; Welcome page
!insertmacro MUI_PAGE_WELCOME
; Directory page
!insertmacro MUI_PAGE_DIRECTORY
; Custom page for configuration
Page custom ConfigPage ConfigPageLeave
; Instfiles page
!insertmacro MUI_PAGE_INSTFILES
; Finish page with multiple options
!define MUI_FINISHPAGE_RUN
!define MUI_FINISHPAGE_RUN_TEXT "Start ScriptAbility PSI Service"
!define MUI_FINISHPAGE_RUN_FUNCTION "StartServiceAndMonitor"
!define MUI_FINISHPAGE_SHOWREADME "$INSTDIR\post_install_info.html"
!define MUI_FINISHPAGE_SHOWREADME_TEXT "View installation information"
!insertmacro MUI_PAGE_FINISH

; Uninstaller pages
!insertmacro MUI_UNPAGE_CONFIRM
!insertmacro MUI_UNPAGE_INSTFILES

; Language files
!insertmacro MUI_LANGUAGE "English"

; Variables
Var LabelPath
Var Dialog
Var LabelPathLabel
Var LabelPathText
Var BrowseButton
Var AutoStartCheckbox
Var AutoStartTrayApp

; Installer attributes
Name "${PRODUCT_NAME}"
OutFile "ScriptAbilityPSI_Setup_${PRODUCT_VERSION}.exe"
InstallDir "C:\ScriptAbilityPSI"
InstallDirRegKey HKLM "${PRODUCT_DIR_REGKEY}" ""
ShowInstDetails show
ShowUnInstDetails show
RequestExecutionLevel admin

; Version information
VIProductVersion "${PRODUCT_VERSION}.0.0"
VIAddVersionKey "ProductName" "${PRODUCT_NAME}"
VIAddVersionKey "ProductVersion" "${PRODUCT_VERSION}"
VIAddVersionKey "CompanyName" "${PRODUCT_PUBLISHER}"
VIAddVersionKey "FileDescription" "${PRODUCT_NAME} Installer"
VIAddVersionKey "FileVersion" "${PRODUCT_VERSION}"
VIAddVersionKey "LegalCopyright" "Â© 2024 ${PRODUCT_PUBLISHER}"

; Functions
Function .onInit
  ; Check for admin rights
  UserInfo::GetAccountType
  Pop $0
  ${If} $0 != "admin"
    MessageBox MB_ICONSTOP "This installer requires administrator privileges.$\n$\nPlease run as Administrator."
    SetErrorLevel 740 ; ERROR_ELEVATION_REQUIRED
    Quit
  ${EndIf}

  ; Check if service is already installed
  ; Use nsExec::Exec to hide console windows completely
  nsExec::Exec '"cmd" /c "sc query ${SERVICE_NAME} >nul 2>&1"'
  Pop $0
  ${If} $0 == 0
    MessageBox MB_YESNO|MB_ICONQUESTION "${PRODUCT_NAME} service is already installed.$\n$\nDo you want to upgrade the existing installation?" IDYES +2
    Abort
  ${EndIf}

  ; Initialize variables
  StrCpy $LabelPath "${DEFAULT_LABEL_PATH}"
  StrCpy $AutoStartTrayApp "1"
  
  ; Read existing label path if upgrading
  IfFileExists "$INSTDIR\htdocs\Label_Path.txt" 0 +3
    FileOpen $0 "$INSTDIR\htdocs\Label_Path.txt" r
    FileRead $0 $LabelPath
    FileClose $0
    ; Trim newline
    ${WordReplace} $LabelPath "$\r$\n" "" "+" $LabelPath
FunctionEnd

Function ConfigPage
  !insertmacro MUI_HEADER_TEXT "Configuration Options" "Configure installation settings for ${PRODUCT_NAME}"
  
  nsDialogs::Create 1018
  Pop $Dialog
  
  ; Label path section
  ${NSD_CreateLabel} 0 0 100% 12u "Label Output Directory:"
  Pop $LabelPathLabel
  
  ${NSD_CreateText} 0 15u 75% 12u $LabelPath
  Pop $LabelPathText
  
  ${NSD_CreateButton} 77% 14u 20% 13u "Browse..."
  Pop $BrowseButton
  ${NSD_OnClick} $BrowseButton BrowseLabelPath
  
  ${NSD_CreateLabel} 0 35u 100% 30u "This directory will be used to store encrypted label files generated by the service. Make sure the service has write permissions to this location."
  Pop $0
  
  ${NSD_CreateLabel} 0 70u 100% 15u "Note: Windows Firewall will be configured to allow access on port ${DEFAULT_PORT}."
  Pop $0
  
  ${NSD_CreateLabel} 0 87u 100% 15u "Visual C++ Redistributable 2015-2022 (x64) will be installed if not present."
  Pop $0
  
  ; Add checkbox for auto-start
  ${NSD_CreateCheckbox} 0 105u 100% 10u "Start PSI Monitor with Windows (recommended)"
  Pop $AutoStartCheckbox
  ${NSD_SetState} $AutoStartCheckbox ${BST_CHECKED}
  
  nsDialogs::Show
FunctionEnd

Function BrowseLabelPath
  nsDialogs::SelectFolderDialog "Select Label Output Directory" $LabelPath
  Pop $0
  ${If} $0 != error
    ${NSD_SetText} $LabelPathText $0
  ${EndIf}
FunctionEnd

Function ConfigPageLeave
  ${NSD_GetText} $LabelPathText $LabelPath
  ${NSD_GetState} $AutoStartCheckbox $AutoStartTrayApp
  
  ; Validate label path
  ${If} $LabelPath == ""
    MessageBox MB_OK|MB_ICONEXCLAMATION "Please specify a label output directory."
    Abort
  ${EndIf}
  
  ; Check if path exists, create if not
  IfFileExists "$LabelPath\*.*" +2
    CreateDirectory "$LabelPath"
FunctionEnd

Function StartServiceAndMonitor
  DetailPrint "Starting ScriptAbility PSI service..."
  nsExec::Exec '"cmd" /c "net start ${SERVICE_NAME} >nul 2>&1"'
  Pop $0
  
  ; Wait a moment for service to start
  Sleep 2000
  
  DetailPrint "Starting PSI Monitor..."
  ; Start PSI Monitor in the background
  Exec '"$INSTDIR\ScriptAbilityPSI_Monitor.exe"'
  
  DetailPrint "Both service and monitor started successfully"
FunctionEnd

Function CheckVCRedist
  DetailPrint "Checking for Visual C++ Redistributable 2015-2022 (x64)..."
  
  ; Check registry for VC++ Redistributable 2015-2022 (x64)
  ; This checks for the latest version that includes all previous versions
  ReadRegStr $0 HKLM "SOFTWARE\Microsoft\VisualStudio\14.0\VC\Runtimes\X64" "Installed"
  ${If} $0 == "1"
    DetailPrint "Visual C++ Redistributable 2015-2022 (x64) is already installed"
    Return
  ${EndIf}
  
  ; Also check alternative registry location for newer versions
  ReadRegStr $0 HKLM "SOFTWARE\Microsoft\DevDiv\VC\Servicing\14.0\RuntimeMinimum" "Install"
  ${If} $0 == "1"
    DetailPrint "Visual C++ Redistributable 2015-2022 (x64) is already installed"
    Return
  ${EndIf}
  
  ; VC++ Redistributable not found, install it
  DetailPrint "Visual C++ Redistributable 2015-2022 (x64) not found"
  DetailPrint "Installing Visual C++ Redistributable 2015-2022 (x64)..."
  
  ; Extract and run the redistributable
  SetOutPath "$TEMP"
  File "Dependencies\VC_redist.x64.exe"
  
  ; Install silently
  DetailPrint "Running VC++ Redistributable installer..."
  nsExec::Exec '"$TEMP\VC_redist.x64.exe" /quiet /norestart'
  Pop $0
  
  ${If} $0 == 0
    DetailPrint "Visual C++ Redistributable installed successfully"
  ${ElseIf} $0 == 1638
    DetailPrint "Visual C++ Redistributable already installed (newer version)"
  ${ElseIf} $0 == 3010
    DetailPrint "Visual C++ Redistributable installed successfully (restart recommended)"
  ${Else}
    DetailPrint "Visual C++ Redistributable installation returned code: $0"
    ; Don't fail the installation, just log it
  ${EndIf}
  
  ; Clean up
  Delete "$TEMP\VC_redist.x64.exe"
FunctionEnd

Function GeneratePostInstallInfo
  DetailPrint "Generating post-installation information..."
  
  ; Simply run the existing working PowerShell script
  DetailPrint "Running show_install_info.ps1 to generate HTML with correct IP..."
  nsExec::Exec 'powershell.exe -NoProfile -WindowStyle Hidden -ExecutionPolicy Bypass -File "$INSTDIR\Scripts\show_install_info.ps1"'
  Pop $0
  
  ; Check if it succeeded
  StrCmp $0 "0" script_success script_failed
  
script_success:
  DetailPrint "Post-installation info generated successfully"
  ; Copy the generated file to the expected name
  CopyFiles "$INSTDIR\ScriptAbilityPSI_info.html" "$INSTDIR\post_install_info.html"
  Goto info_done
  
script_failed:
  DetailPrint "PowerShell script failed, creating basic info file..."
  ; Fallback: just copy template and use localhost
  CopyFiles "$INSTDIR\Scripts\post_install_info_template.html" "$INSTDIR\post_install_info.html"
  
info_done:
FunctionEnd

; Installer sections
Section "Dependencies" SEC00
  Call CheckVCRedist
SectionEnd

Section "Main Installation" SEC01
  SetOutPath "$INSTDIR"
  SetOverwrite try
  
  ; Stop service if running (for upgrades)
  ; Use silent stop to avoid showing messages
  nsExec::Exec '"cmd" /c "net stop ${SERVICE_NAME} >nul 2>&1"'
  Pop $0
  Sleep 1000
  
  ; Create installation directory structure
  CreateDirectory "$INSTDIR"
  CreateDirectory "$INSTDIR\logs"
  
  ; Copy main application files
  DetailPrint "Copying application files..."
  File /r "ScriptabilityPSI\*.*"
  
  ; Copy icon file
  File "Icons\icon.ico"
  
  ; Copy tray application
  DetailPrint "Installing PSI Monitor application..."
  File "TrayApp\ScriptAbilityPSI_Monitor.exe"
  
  ; Create Scripts subfolder and copy PowerShell scripts
  DetailPrint "Installing configuration scripts..."
  CreateDirectory "$INSTDIR\Scripts"
  SetOutPath "$INSTDIR\Scripts"
  File "Scripts\post_install_info_template.html"
  File "Scripts\show_install_info.ps1"
  File "Scripts\remove_firewall.ps1"
  File "Scripts\configure_firewall.ps1"
  SetOutPath "$INSTDIR"
  
  ; Create xampp directory structure
  DetailPrint "Creating supporting directory structure..."
  CreateDirectory "C:\xampp"
  CreateDirectory "C:\xampp\htdocs"
  CreateDirectory "C:\xampp\htdocs\pioneerrx"
  
  ; Write label path configuration
  DetailPrint "Configuring label output path..."
  FileOpen $0 "$INSTDIR\htdocs\Label_Path.txt" w
  FileWrite $0 $LabelPath
  FileClose $0
  
  ; Copy Label_Path.txt to xampp location
  CopyFiles "$INSTDIR\htdocs\Label_Path.txt" "C:\xampp\htdocs\pioneerrx\Label_Path.txt"
  
  ; Create empty enc.txt file
  FileOpen $0 "C:\xampp\htdocs\pioneerrx\enc.txt" w
  FileClose $0
  
  ; Generate post-installation info
  Call GeneratePostInstallInfo
  
  ; Clean up temporary files no longer needed
  DetailPrint "Cleaning up installation files..."
  Delete "$INSTDIR\Scripts\post_install_info_template.html"
  Delete "$INSTDIR\ScriptAbilityPSI_info.html"
SectionEnd

Section "Windows Service" SEC02
  DetailPrint "Installing Windows service..."
  
  ; Install the service
  SetOutPath "$INSTDIR"
  nsExec::Exec '"$INSTDIR\apache\bin\httpd.exe" -k install -n "${SERVICE_NAME}" -f "$INSTDIR\apache\conf\httpd.conf"'
  Pop $0
  ; Apache httpd.exe returns 0 on success, don't show error if successful
  ${If} $0 == 0
    DetailPrint "Service installed successfully"
    ; Set service to automatic start
    nsExec::Exec '"sc" config ${SERVICE_NAME} start= auto'
    Pop $1
    
    ; Set service display name  
    nsExec::Exec '"sc" config ${SERVICE_NAME} DisplayName= "ScriptAbility PSI Web Service"'
    Pop $1
  ${Else}
    MessageBox MB_OK|MB_ICONEXCLAMATION "Failed to install Windows service. Please check the installation log."
  ${EndIf}
SectionEnd

Section "Firewall Configuration" SEC03
  DetailPrint "Configuring Windows Firewall..."
  
  ; Check if Windows Firewall service is running
  DetailPrint "Checking Windows Firewall service status..."
  nsExec::Exec '"cmd" /c "sc query MpsSvc >nul 2>&1"'
  Pop $0
  DetailPrint "Firewall service check result: $0"
  ${If} $0 != 0
    DetailPrint "Windows Firewall service is not running - skipping firewall configuration"
  ${Else}
    DetailPrint "Windows Firewall service is running, proceeding with rule configuration"
    ; Use the configure_firewall.ps1 script instead of inline commands
    DetailPrint "Running firewall configuration script..."
    nsExec::Exec 'powershell.exe -NoProfile -WindowStyle Hidden -ExecutionPolicy Bypass -File "$INSTDIR\Scripts\configure_firewall.ps1"'
    Pop $0
    DetailPrint "Firewall configuration result: $0"
    ${If} $0 != 0
      DetailPrint "Could not configure Windows Firewall automatically"
      DetailPrint "You may need to manually allow port ${DEFAULT_PORT} in Windows Firewall"
      ; Don't show error dialog, just log it
    ${Else}
      DetailPrint "Firewall rule configured successfully"
    ${EndIf}
  ${EndIf}
  DetailPrint "Firewall configuration complete"
SectionEnd

Section -Post
  ; Write registry keys
  WriteUninstaller "$INSTDIR\uninstall.exe"
  WriteRegStr HKLM "${PRODUCT_DIR_REGKEY}" "" "$INSTDIR"
  WriteRegStr ${PRODUCT_UNINST_ROOT_KEY} "${PRODUCT_UNINST_KEY}" "DisplayName" "$(^Name)"
  WriteRegStr ${PRODUCT_UNINST_ROOT_KEY} "${PRODUCT_UNINST_KEY}" "UninstallString" "$INSTDIR\uninstall.exe"
  WriteRegStr ${PRODUCT_UNINST_ROOT_KEY} "${PRODUCT_UNINST_KEY}" "DisplayIcon" "$INSTDIR\uninstall.exe"
  WriteRegStr ${PRODUCT_UNINST_ROOT_KEY} "${PRODUCT_UNINST_KEY}" "DisplayVersion" "${PRODUCT_VERSION}"
  WriteRegStr ${PRODUCT_UNINST_ROOT_KEY} "${PRODUCT_UNINST_KEY}" "Publisher" "${PRODUCT_PUBLISHER}"
  WriteRegStr ${PRODUCT_UNINST_ROOT_KEY} "${PRODUCT_UNINST_KEY}" "InstallLocation" "$INSTDIR"
  WriteRegDWORD ${PRODUCT_UNINST_ROOT_KEY} "${PRODUCT_UNINST_KEY}" "NoModify" 1
  WriteRegDWORD ${PRODUCT_UNINST_ROOT_KEY} "${PRODUCT_UNINST_KEY}" "NoRepair" 1
  
  ; Create Start Menu shortcuts
  CreateDirectory "$SMPROGRAMS\ScriptAbility PSI"
  CreateShortcut "$SMPROGRAMS\ScriptAbility PSI\Service Information.lnk" "$INSTDIR\post_install_info.html" "" "$INSTDIR\icon.ico" 0
  CreateShortcut "$SMPROGRAMS\ScriptAbility PSI\PSI Monitor.lnk" "$INSTDIR\ScriptAbilityPSI_Monitor.exe" "" "$INSTDIR\icon.ico" 0
  CreateShortcut "$SMPROGRAMS\ScriptAbility PSI\Uninstall.lnk" "$INSTDIR\uninstall.exe" "" "$INSTDIR\uninstall.exe" 0
  
  ; Configure Windows startup for tray app if selected
  ${If} $AutoStartTrayApp == ${BST_CHECKED}
    DetailPrint "Configuring PSI Monitor to start with Windows..."
    WriteRegStr HKLM "Software\Microsoft\Windows\CurrentVersion\Run" "ScriptAbilityPSI_Monitor" "$INSTDIR\ScriptAbilityPSI_Monitor.exe"
  ${EndIf}
SectionEnd

; Uninstaller
Section Uninstall
  ; Stop and close PSI Monitor tray application first
  DetailPrint "Stopping PSI Monitor application..."
  Call un.StopPSIMonitor
  
  ; Stop service
  DetailPrint "Stopping ${SERVICE_NAME} service..."
  Call un.StopService
  
  ; Uninstall service
  DetailPrint "Removing Windows service..."
  nsExec::Exec '"cmd" /c "$INSTDIR\apache\bin\httpd.exe -k uninstall -n ${SERVICE_NAME} >nul 2>&1"'
  Pop $0
  Sleep 2000
  
  ; Remove firewall rules using the dedicated script
  DetailPrint "Removing firewall rules..."
  nsExec::Exec 'powershell.exe -NoProfile -WindowStyle Hidden -ExecutionPolicy Bypass -File "$INSTDIR\Scripts\remove_firewall.ps1"'
  Pop $0
  
  ; Remove files
  DetailPrint "Removing application files..."
  ; Remove specific files in root directory first
  Delete "$INSTDIR\ScriptAbilityPSI_Monitor.exe"
  Delete "$INSTDIR\icon.ico"
  Delete "$INSTDIR\post_install_info.html"
  Delete "$INSTDIR\ScriptAbilityPSI_info.html"
  Delete "$INSTDIR\uninstall.exe"
  ; Remove Scripts subdirectory
  RMDir /r "$INSTDIR\Scripts"
  ; Remove main application directories
  RMDir /r "$INSTDIR\apache"
  RMDir /r "$INSTDIR\php"
  RMDir /r "$INSTDIR\htdocs"
  RMDir /r "$INSTDIR\logs"
  ; Remove any remaining files
  Delete "$INSTDIR\*.*"
  
  ; Remove xampp directories (only if empty)
  Delete "C:\xampp\htdocs\pioneerrx\Label_Path.txt"
  Delete "C:\xampp\htdocs\pioneerrx\enc.txt"
  RMDir "C:\xampp\htdocs\pioneerrx"
  RMDir "C:\xampp\htdocs"
  RMDir "C:\xampp"
  
  ; Remove shortcuts
  Delete "$SMPROGRAMS\ScriptAbility PSI\Service Information.lnk"
  Delete "$SMPROGRAMS\ScriptAbility PSI\PSI Monitor.lnk"
  Delete "$SMPROGRAMS\ScriptAbility PSI\Uninstall.lnk"
  RMDir "$SMPROGRAMS\ScriptAbility PSI"
  
  ; Remove installation directory
  RMDir "$INSTDIR"
  
  ; Remove registry keys
  DeleteRegKey ${PRODUCT_UNINST_ROOT_KEY} "${PRODUCT_UNINST_KEY}"
  DeleteRegKey HKLM "${PRODUCT_DIR_REGKEY}"
  DeleteRegValue HKLM "Software\Microsoft\Windows\CurrentVersion\Run" "ScriptAbilityPSI_Monitor"
  
  SetAutoClose true
SectionEnd

Function un.StopPSIMonitor
  ; Try to gracefully close PSI Monitor by finding and terminating the process
  DetailPrint "Looking for running PSI Monitor processes..."
  
  ; Use multiple methods to ensure we catch the process
  ; Method 1: Check with .exe extension
  nsExec::Exec '"cmd" /c "tasklist /FI "IMAGENAME eq ScriptAbilityPSI_Monitor.exe" 2>nul | find /I "ScriptAbilityPSI_Monitor" >nul"'
  Pop $0
  
  ; Method 2: Also check without .exe extension (some systems vary)
  ${If} $0 != 0
    nsExec::Exec '"cmd" /c "tasklist /FI "IMAGENAME eq ScriptAbilityPSI_Monitor" 2>nul | find /I "ScriptAbilityPSI_Monitor" >nul"'
    Pop $0
  ${EndIf}
  
  ${If} $0 == 0
    DetailPrint "PSI Monitor is running, attempting to close..."
    
    ; Try gentle termination first - try both variants
    DetailPrint "Attempting graceful shutdown..."
    nsExec::Exec '"cmd" /c "taskkill /IM ScriptAbilityPSI_Monitor.exe /T >nul 2>&1"'
    Pop $1
    nsExec::Exec '"cmd" /c "taskkill /IM ScriptAbilityPSI_Monitor /T >nul 2>&1"'
    Pop $2
    Sleep 3000
    
    ; Check if it's still running - comprehensive check
    nsExec::Exec '"cmd" /c "tasklist | find /I "ScriptAbilityPSI_Monitor" >nul"'
    Pop $0
    ${If} $0 == 0
      DetailPrint "Process still running, forcing termination..."
      nsExec::Exec '"cmd" /c "taskkill /IM ScriptAbilityPSI_Monitor.exe /F /T >nul 2>&1"'
      Pop $1
      nsExec::Exec '"cmd" /c "taskkill /IM ScriptAbilityPSI_Monitor /F /T >nul 2>&1"'
      Pop $2
      Sleep 2000
      
      ; Final verification
      nsExec::Exec '"cmd" /c "tasklist | find /I "ScriptAbilityPSI_Monitor" >nul"'
      Pop $0
      ${If} $0 == 0
        DetailPrint "Warning: PSI Monitor process may still be running"
      ${Else}
        DetailPrint "PSI Monitor process terminated successfully"
      ${EndIf}
    ${Else}
      DetailPrint "PSI Monitor stopped gracefully"
    ${EndIf}
  ${Else}
    DetailPrint "PSI Monitor is not running"
  ${EndIf}
FunctionEnd

Function un.StopService
  nsExec::Exec '"cmd" /c "net stop ${SERVICE_NAME} >nul 2>&1"'
  Pop $0
  Sleep 2000
FunctionEnd

Function un.onInit
  MessageBox MB_ICONQUESTION|MB_YESNO|MB_DEFBUTTON2 "Are you sure you want to uninstall ${PRODUCT_NAME}?" IDYES +2
  Abort
FunctionEnd

Function un.onUninstSuccess
  HideWindow
  MessageBox MB_ICONINFORMATION|MB_OK "${PRODUCT_NAME} was successfully removed from your computer."
FunctionEnd